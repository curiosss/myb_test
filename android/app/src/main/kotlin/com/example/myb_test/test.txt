package com.example.myb_test

import android.content.Intent
import android.content.Context
import android.content.BroadcastReceiver
import android.os.Build
import android.os.Bundle
import android.telephony.TelephonyManager
import android.telephony.PhoneStateListener
import androidx.annotation.NonNull
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel
import android.media.AudioManager
import android.app.NotificationManager
import android.provider.Settings

import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
    ActivityCompat.requestPermissions(this, arrayOf(android.Manifest.permission.READ_PHONE_STATE), REQUEST_CODE)
}

class MainActivity: FlutterActivity() {
    private val CHANNEL = "com.example.app/callBlocker"

    override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler {
            call, result ->
            if (call.method == "setPhoneToSilent") {
                setPhoneToSilent()
                result.success(null)
            } else {
                result.notImplemented()
            }
        }
    }

    private fun setPhoneToSilent() {
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !notificationManager.isNotificationPolicyAccessGranted) {
            val intent = Intent(Settings.ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS)
            startActivity(intent)
        } else {
            val audioManager = getSystemService(Context.AUDIO_SERVICE) as AudioManager
            audioManager.ringerMode = AudioManager.RINGER_MODE_SILENT
        }
    }

    private fun blockIncomingCalls() {
        val receiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                // logic
            }
        }
        
        val filter = IntentFilter(TelephonyManager.ACTION_PHONE_STATE_CHANGED)
        applicationContext.registerReceiver(receiver, filter)
    }
}